
@charset 'UTF-8';

@mixin clearfix() {
    &:after {
        content: '';
        display: table;
        clear: both;
    }
}

@mixin cursor() {
    cursor: pointer;
}




@function rem($px, $base-font-size: 36px) {
    @return ($px / $base-font-size) * 1rem;
}


@mixin font-dpr($font-size) {
    font-size: $font-size;
    [data-dpr="2"] & {
        font-size: $font-size * 2;
    }
    [data-dpr="3"] & {
        font-size: $font-size * 3;
    }
}


@mixin hidpi($ratio:null) {
    $ratio: 1.3 !default;;
    @media only screen and (-webkit-min-device-pixel-ratio: $ratio), only screen and (min--moz-device-pixel-ratio: $ratio), only screen and (-o-min-device-pixel-ratio: #{$ratio}/1), only screen and (min-resolution: round($ratio * 96dpi)), only screen and (min-resolution: $ratio * 1dppx) {
        @content;
    }
}
@mixin query($process:null){
    $process:750px !default;
    @media (max-width:$process){
        @content;
    }
}

@function _linear-positions-parser($pos) {
    $type: type-of(nth($pos, 1));
    $spec: null;
    $degree: null;
    $side: null;
    $corner: null;
    $length: length($pos);
    // Parse Side and corner positions
    @if ($length > 1) {
        @if nth($pos, 1)=="to" {
            // Newer syntax
            $side: nth($pos, 2);
            @if $length==2 {
                // eg. to top
                // Swap for backwards compatibility
                $degree: _position-flipper(nth($pos, 2));
            }
            @else if $length==3 {
                // eg. to top left
                $corner: nth($pos, 3);
            }
        }
        @else if $length==2 {
            // Older syntax ("top left")
            $side: _position-flipper(nth($pos, 1));
            $corner: _position-flipper(nth($pos, 2));
        }
        @if ("#{$side} #{$corner}"=="left top") or ("#{$side} #{$corner}"=="top left") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}"=="right top") or ("#{$side} #{$corner}"=="top right") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}"=="right bottom") or ("#{$side} #{$corner}"=="bottom right") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        @else if ("#{$side} #{$corner}"=="left bottom") or ("#{$side} #{$corner}"=="bottom left") {
            $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
        }
        $spec: to $side $corner;
    }
    @else if $length==1 {
        // Swap for backwards compatibility
        @if $type==string {
            $degree: $pos;
            $spec: to _position-flipper($pos);
        }
        @else {
            $degree: -270 - $pos; //rotate the gradient opposite from spec
            $spec: $pos;
        }
    }
    $degree: unquote($degree + ",");
    $spec: unquote($spec + ",");
    @return $degree $spec;
}

@function _position-flipper($pos) {
    @return if($pos==left, right, null) if($pos==right, left, null) if($pos==top, bottom, null) if($pos==bottom, top, null);
}
